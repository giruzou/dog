#!/usr/bin/env python
import sys
from subprocess import Popen, PIPE
import re
import zlib
import hashlib
import chardet
from tempfile import NamedTemporaryFile

# TODO: rot47, z85, BER/DER/PEM+ASN.1
#       (with key) xor
def converter(data, alg):
    alg = alg.lower()
    if alg == 'bin':
        return bin(int(data, 0))
    elif alg == 'oct':
        return oct(int(data, 0))
    elif alg == 'dec':
        return str(int(data, 0))
    elif alg == 'hex':
        return hex(int(data, 0))
    elif alg == 'crlf':
        return re.sub(r'(?:\x0d\x0a|\x0d|\x0a)', '\x0d\x0a', data)
    elif alg == 'cr':
        return re.sub(r'(?:\x0d\x0a|\x0d|\x0a)', '\x0d', data)
    elif alg == 'lf':
        return re.sub(r'(?:\x0d\x0a|\x0d|\x0a)', '\x0a', data)
    elif alg == 'upper':
        return data.upper()
    elif alg == 'lower':
        return data.lower()
    elif alg == 'rot13':
        return data.encode('rot13')
    else:
        print >>sys.stderr, "unknown conversion algorithm: %s" % alg
        sys.exit(1)

# TODO: base91, ascii85, IPv4 dotted/decimal, IPv6 full/simplified
#       (with key) RC4, DES, 3DES, AES, RSA, DSA, ECDSA
#       (with magic) gzip, xz
def encoder(data, alg):
    alg = alg.lower()
    if alg == 'hex':
        return ''.join("\\x%02x" % ord(c) for c in data)
    elif alg == 'jsescape':
        if len(data) % 2 != 0:
            data += '\x00'
        return ''.join("%%u%02x%02x" % (ord(data[2*i+1]), ord(data[2*i])) for i in xrange(len(data)/2))
    elif alg == 'url':
        return ''.join("%%%02X" % ord(c) for c in data)
    elif alg == 'html':
        return ''.join("&#x%04x" % ord(c) for c in data.decode('utf-8'))
    elif alg == 'base64':
        return data.encode('base64').replace('\n', '')
    elif alg == 'quopri':
        return data.encode('quopri')
    elif alg == 'punycode':
        return data.decode('utf-8').encode('idna')
    elif alg == 'uu':
        return data.encode('uu')
    elif alg == 'deflate':
        return data.encode('zlib')
    elif alg == 'bz2':
        return data.encode('bz2')
    else:
        print >>sys.stderr, "unknown encoding algorithm: %s" % alg
        sys.exit(1)

def decoder(data, alg):
    alg = alg.lower()
    if alg == 'hex':
        return re.sub(r'\\x([\dA-F]{2})', lambda m: chr(int(m.group(1),16)), data, flags=re.I)
    elif alg == 'jsescape':
        return re.sub(r'%u([\dA-F]{4})', lambda m: chr(int(m.group(1)[2:],16)) + chr(int(m.group(1)[:2],16)), data, flags=re.I)
    elif alg == 'url':
        return re.sub(r'%([\dA-F]{2})', lambda m: chr(int(m.group(1),16)), data, flags=re.I)
    elif alg == 'html':
        return re.sub(r'&#x([\dA-F]{4})', lambda m: unichr(int(m.group(1),16)), data, flags=re.I).encode('utf-8')
    elif alg == 'base64':
        return data.decode('base64')
    elif alg == 'quopri':
        return data.decode('quopri')
    elif alg == 'punycode':
        return data.decode('idna').encode('utf-8')
    elif alg == 'uu':
        return data.decode('uu')
    elif alg == 'deflate':
        return data.decode('zlib')
    elif alg == 'bz2':
        return data.decode('bz2')
    else:
        print >>sys.stderr, "unknown decoding algorithm: %s" % alg
        sys.exit(1)

# TODO: crc1/8/16/24, md4, rmd160, whirlpool
def hashcalculator(data, alg):
    alg = alg.lower()
    if alg == 'crc32':
        return "%08x" % zlib.crc32(data)
    elif alg == 'adler32':
        return "%08x" % zlib.adler32(data)
    else:
        try:
            h = hashlib.new(alg)
        except Exception as e:
            print >>sys.stderr, "unknown hash algorithm: %s" % alg
            sys.exit(1)
        h.update(data)
        return "%s\n" % h.hexdigest()

def iconverter(data, alg):
    codecs = alg.split(':', 1)
    if not codecs[0] or codecs[0] == 'auto':
        codecs[0] = chardet.detect(data)['encoding']
    if not codecs[1] or codecs[1] == 'auto':
        codecs[1] = sys.stdout.encoding or 'utf8'
    try:
        return data.decode(codecs[0]).encode(codecs[1])
    except LookupError:
        print >>sys.stderr, "unknown character encoding: %s" % alg
        sys.exit(1)

def fileinspector(data, alg=None):
    def run_command(cmd, data, shell=False):
        p = Popen(cmd, stdin=PIPE, stdout=PIPE, shell=shell)
        out, err = p.communicate(data)
        if p.returncode != 0:
            sys.exit(p.returncode)
        return out

    out = run_command(['file', '-'], data)
    result = out.split(': ', 1)[1]

    if result.startswith('POSIX tar archive'):
        result += run_command(['tar', 'tvf', '-'], data)
    elif result.startswith('gzip compressed data') and not ', was ' in result:
        result += run_command(['tar', 'ztvf', '-'], data)
    elif result.startswith('bzip2 compressed data'):
        result += run_command(['tar', 'jtvf', '-'], data)
    elif result.startswith('XZ compressed data'):
        result += run_command(['tar', 'Jtvf', '-'], data)
    elif result.startswith('Zip archive data'):
        with NamedTemporaryFile() as f:
            f.write(data)
            f.flush()
            result += run_command("unzip -l %s | sed 1d" % f.name, data, shell=True)
    elif result.startswith('ELF '):
        with NamedTemporaryFile() as f:
            f.write(data)
            f.flush()
            if result.endswith('not stripped\n'):
                result += run_command("nm -n %s 2>&1" % f.name, data, shell=True)
            else:
                result += run_command("nm -n -D %s 2>&1" % f.name, data, shell=True)
    else:
        result += run_command('od -Ax -tx1z -N 256', data, shell=True)

    return result


if __name__ == '__main__':
    args = sys.argv[1:]
    catargs = ['cat']
    dispatcher = None
    while len(args) > 0:
        arg = args.pop(0)
        if len(args) > 0:
            if arg in ('-c', '--convert'):
                dispatcher = [converter, args.pop(0)]
                continue
            elif arg in ('-e', '--encode'):
                dispatcher = [encoder, args.pop(0)]
                continue
            elif arg in ('-d', '--decode'):
                dispatcher = [decoder, args.pop(0)]
                continue
            elif arg in ('-h', '--hash'):
                dispatcher = [hashcalculator, args.pop(0)]
                continue
            elif arg in ('-i', '--iconv'):
                dispatcher = [iconverter, args.pop(0)]
                continue
        if arg in ('-l', '--list'):
            dispatcher = [fileinspector, None]
            continue
        catargs.append(arg)
    p = Popen(catargs, stdin=sys.stdin, stdout=PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        sys.exit(p.returncode)
    if dispatcher:
        out = dispatcher[0](out, dispatcher[1])
    sys.stdout.write(out)
